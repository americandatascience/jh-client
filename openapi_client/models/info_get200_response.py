# coding: utf-8

"""
    JupyterHub

    The REST API for JupyterHub

    The version of the OpenAPI document: 4.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from openapi_client.models.info_get200_response_authenticator import InfoGet200ResponseAuthenticator
from openapi_client.models.info_get200_response_spawner import InfoGet200ResponseSpawner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class InfoGet200Response(BaseModel):
    """
    InfoGet200Response
    """ # noqa: E501
    version: Optional[StrictStr] = Field(default=None, description="The version of JupyterHub itself")
    python: Optional[StrictStr] = Field(default=None, description="The Python version, as returned by sys.version")
    sys_executable: Optional[StrictStr] = Field(default=None, description="The path to sys.executable running JupyterHub")
    authenticator: Optional[InfoGet200ResponseAuthenticator] = None
    spawner: Optional[InfoGet200ResponseSpawner] = None
    __properties: ClassVar[List[str]] = ["version", "python", "sys_executable", "authenticator", "spawner"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of InfoGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of authenticator
        if self.authenticator:
            _dict['authenticator'] = self.authenticator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spawner
        if self.spawner:
            _dict['spawner'] = self.spawner.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of InfoGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "version": obj.get("version"),
            "python": obj.get("python"),
            "sys_executable": obj.get("sys_executable"),
            "authenticator": InfoGet200ResponseAuthenticator.from_dict(obj.get("authenticator")) if obj.get("authenticator") is not None else None,
            "spawner": InfoGet200ResponseSpawner.from_dict(obj.get("spawner")) if obj.get("spawner") is not None else None
        })
        return _obj


