# coding: utf-8

"""
    JupyterHub

    The REST API for JupyterHub

    The version of the OpenAPI document: 4.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from jh_client.api.default_api import DefaultApi


class TestDefaultApi(unittest.TestCase):
    """DefaultApi unit test stubs"""

    def setUp(self) -> None:
        self.api = DefaultApi()

    def tearDown(self) -> None:
        pass

    def test_authorizations_cookie_cookie_name_cookie_value_get(self) -> None:
        """Test case for authorizations_cookie_cookie_name_cookie_value_get

        Identify a user from a cookie
        """
        pass

    def test_authorizations_token_post(self) -> None:
        """Test case for authorizations_token_post

        Request a new API token
        """
        pass

    def test_authorizations_token_token_get(self) -> None:
        """Test case for authorizations_token_token_get

        Identify a user or service from an API token
        """
        pass

    def test_groups_get(self) -> None:
        """Test case for groups_get

        List groups
        """
        pass

    def test_groups_name_delete(self) -> None:
        """Test case for groups_name_delete

        Delete a group
        """
        pass

    def test_groups_name_get(self) -> None:
        """Test case for groups_name_get

        Get a group by name
        """
        pass

    def test_groups_name_post(self) -> None:
        """Test case for groups_name_post

        Create a group
        """
        pass

    def test_groups_name_properties_put(self) -> None:
        """Test case for groups_name_properties_put

        Set the group properties.  Added in JupyterHub 3.2. 
        """
        pass

    def test_groups_name_users_delete(self) -> None:
        """Test case for groups_name_users_delete

        Remove users from a group 
        """
        pass

    def test_groups_name_users_post(self) -> None:
        """Test case for groups_name_users_post

        Add users to a group
        """
        pass

    def test_info_get(self) -> None:
        """Test case for info_get

        Get detailed info about JupyterHub
        """
        pass

    def test_oauth2_authorize_get(self) -> None:
        """Test case for oauth2_authorize_get

        OAuth 2.0 authorize endpoint
        """
        pass

    def test_oauth2_token_post(self) -> None:
        """Test case for oauth2_token_post

        Request an OAuth2 token
        """
        pass

    def test_proxy_get(self) -> None:
        """Test case for proxy_get

        Get the proxy's routing table
        """
        pass

    def test_proxy_patch(self) -> None:
        """Test case for proxy_patch

        Notify the Hub about a new proxy
        """
        pass

    def test_proxy_post(self) -> None:
        """Test case for proxy_post

        Force the Hub to sync with the proxy
        """
        pass

    def test_root_get(self) -> None:
        """Test case for root_get

        Get JupyterHub version
        """
        pass

    def test_services_get(self) -> None:
        """Test case for services_get

        List services
        """
        pass

    def test_services_name_get(self) -> None:
        """Test case for services_name_get

        Get a service by name
        """
        pass

    def test_shutdown_post(self) -> None:
        """Test case for shutdown_post

        Shutdown the Hub
        """
        pass

    def test_user_get(self) -> None:
        """Test case for user_get

        Return authenticated user's model
        """
        pass

    def test_users_get(self) -> None:
        """Test case for users_get

        List users
        """
        pass

    def test_users_name_activity_post(self) -> None:
        """Test case for users_name_activity_post

        Notify Hub of activity for a given user.
        """
        pass

    def test_users_name_delete(self) -> None:
        """Test case for users_name_delete

        Delete a user
        """
        pass

    def test_users_name_get(self) -> None:
        """Test case for users_name_get

        Get a user by name
        """
        pass

    def test_users_name_patch(self) -> None:
        """Test case for users_name_patch

        Modify a user
        """
        pass

    def test_users_name_post(self) -> None:
        """Test case for users_name_post

        Create a single user
        """
        pass

    def test_users_name_server_delete(self) -> None:
        """Test case for users_name_server_delete

        Stop a user's server
        """
        pass

    def test_users_name_server_post(self) -> None:
        """Test case for users_name_server_post

        Start a user's single-user notebook server
        """
        pass

    def test_users_name_servers_server_name_delete(self) -> None:
        """Test case for users_name_servers_server_name_delete

        Stop a user's named server
        """
        pass

    def test_users_name_servers_server_name_post(self) -> None:
        """Test case for users_name_servers_server_name_post

        Start a user's single-user named-server notebook server
        """
        pass

    def test_users_name_tokens_get(self) -> None:
        """Test case for users_name_tokens_get

        List tokens for the user
        """
        pass

    def test_users_name_tokens_post(self) -> None:
        """Test case for users_name_tokens_post

        Create a new token for the user
        """
        pass

    def test_users_name_tokens_token_id_delete(self) -> None:
        """Test case for users_name_tokens_token_id_delete

        Delete (revoke) a token by id
        """
        pass

    def test_users_name_tokens_token_id_get(self) -> None:
        """Test case for users_name_tokens_token_id_get

        Get the model for a token by id
        """
        pass

    def test_users_post(self) -> None:
        """Test case for users_post

        Create multiple users
        """
        pass


if __name__ == '__main__':
    unittest.main()
